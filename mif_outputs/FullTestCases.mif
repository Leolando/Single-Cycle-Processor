-- null
DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1, $0, 65535     	        # r1 = 65535 = 0x0000FFFF
0001 : 00101000010000001111111111111111;
    -- sll $2, $1, 15			# r2 = r1 << 15 = 0x7FFF8000 = 2147450880(decimal)
0002 : 00000000100000100000011110010000;
    -- addi $3, $2, 32767		# r3 = r2 + 32767 = 0x7FFF8000 + 0x00007FFF = 0x7FFFFFFF(hex) = 2147483647(decimal)
0003 : 00101000110001000111111111111111;
    -- addi $4, $0, 1			# r4 = 1
0004 : 00101001000000000000000000000001;
    -- add $5, $4, $3			# r5 = 1 + 2147483647 = 0x80000000 = 2147483647 (decimal) = -2147483647(add overflow addition)
0005 : 00000001010010000011000000000000;
    -- sw $30, 1($0)			# store rstatus(1) into memeory address 1 
0006 : 00111111100000000000000000000001;
    -- add $6, $1, $4			# r6 = 65535 + 1 = 65536  (normal addition) (then how about overflow addition?)
0007 : 00000001100000100100000000000000;
    -- sll $7, $4, 31			# r7 = r4 << 31 = 0x80000000(hex) = -2147483648(decimal)
0008 : 00000001110010000000111110010000;
    -- sub $8, $7, $3			# r8 = r7 - r3 = 0x80000000(hex) - 0x7FFFFFFF(hex) = -2147483648(decimal) - 2147483647(decimal)
0009 : 00000010000011100011000000000100;
    -- sw $30, 2($0)			# store rstatus(3) into memeory address 2 
0010 : 00111111100000000000000000000010;
    -- sub $9, $1, $4			# r9 = r1 - r4 = 65535 - 1 = 65534 (normal sub) (then how about overflow sub?)
0011 : 00000010010000100100000000000100;
    -- and $10, $1, $2			# r10 = r1 & r2 = 0x0000FFFF & 0x7FFF8000 = 0x00008000(hex) = 32768(decimal)
0012 : 00000010100000100010000000001000;
    -- or $12, $1, $2			# r12 = r1 | r2 = 0x0000FFFF | 0x7FFF8000 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0013 : 00000011000000100010000000001100;
    -- addi $13, $3, 1			# r13 = r3 +1 = 0x7FFFFFFF(hex) + 1 = 0x80000000(hex) 
0014 : 00101011010001100000000000000001;
    -- sw $30, 3($0)			# store rstatus(2) into memeory address 3 
0015 : 00111111100000000000000000000011;
    -- addi $14, $0, 200		# r14 = 0 + 200 = 200
0016 : 00101011100000000000000011001000;
    -- addi $20, $0, 2         # r20 = 2
0017 : 00101101000000000000000000000010;
    -- add $21, $4, $20        # r21 = 3
0018 : 00000101010010010100000000000000;
    -- sub $22, $20, $4        # r22 = 1
0019 : 00000101101010000100000000000100;
    -- and $23, $22, $21       # r23 = 1 & 3 = 1
0020 : 00000101111011010101000000001000;
    -- or $24, $20, $23        # r24 = 2 | 1 = 3
0021 : 00000110001010010111000000001100;
    -- sll $25, $23,1          # r25 = 1 << 1 = 2
0022 : 00000110011011100000000010010000;
    -- sra $26, $25,1          # r26 = 2 >> 1 = 1 
0023 : 00000110101100100000000010010100;
    -- sw $1, 1($14)			# store 65535 into address 201 
0024 : 00111000010111000000000000000001;
    -- sw $4, 1($0)			# store 1 into address 1
0025 : 00111001000000000000000000000001;
    -- sw $20, 2($0)			# store 2 into address 2
0026 : 00111101000000000000000000000010;
    -- addi $27, $0, 456		# r27 = 456 
0027 : 00101110110000000000000111001000;
    -- sw $1, 0($27)			# store 65535 into address 456
0028 : 00111000011101100000000000000000;
    -- lw $28, 1($0)			# load 1 from address 1 into r28
0029 : 01000111000000000000000000000001;
    -- lw $29, 2($0)			# load 2 from address 2 into r29
0030 : 01000111010000000000000000000010;
    -- lw $19, 0($27)			# load 65535 from address 456 into r19
0031 : 01000100111101100000000000000000;
    -- add $1, $0, $28			# r1 = r28 = 1
0032 : 00000000010000011100000000000000;
    -- add $2, $0, $29			# r2 = r29 = 2
0033 : 00000000100000011101000000000000;
[0034 .. 4095] : 00000000000000000000000000000000;
END;
