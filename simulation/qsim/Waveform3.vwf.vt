// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/26/2022 23:31:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          skeleton
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module skeleton_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg reset;
// wires                                               
wire [11:0] address_imem;
wire [4:0] ctrl_readRegA;
wire [4:0] ctrl_readRegB;
wire [4:0] ctrl_writeReg;
wire [31:0] data_writeReg;
wire dmem_clock;
wire imem_clock;
wire [31:0] pc;
wire processor_clock;
wire [31:0] r1;
wire [31:0] r30;
wire [31:0] r31;
wire regfile_clock;

// assign statements (if any)                          
skeleton i1 (
// port map - connection between master ports and signals/registers   
	.address_imem(address_imem),
	.clock(clock),
	.ctrl_readRegA(ctrl_readRegA),
	.ctrl_readRegB(ctrl_readRegB),
	.ctrl_writeReg(ctrl_writeReg),
	.data_writeReg(data_writeReg),
	.dmem_clock(dmem_clock),
	.imem_clock(imem_clock),
	.pc(pc),
	.processor_clock(processor_clock),
	.r1(r1),
	.r30(r30),
	.r31(r31),
	.regfile_clock(regfile_clock),
	.reset(reset)
);
initial 
begin 
#2500000 $finish;
end 

// clock
initial
begin
	clock = 1'b1;
	# 10000;
	repeat(124)
	begin
		clock = 1'b0;
		clock = #10000 1'b1;
		# 10000;
	end
	clock = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

